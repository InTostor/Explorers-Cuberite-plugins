И так, вы зашли в этот канал, а это значит что у вас ~~БеДы с Башкой~~ много свободного времени и нет личной жизни.
Всяк сюда входящий, автоматически продаёт свою душу [ДАННЫЕ УДАЛЕНЫ] и  получает [ДАННЫЕ УДАЛЕНЫ].
Ну а теперь Wellcome to dungeon и ответы на вопросы:

1.Что это такое ваше ЛУА? ЛУА, это шедевр среди ЯП, люди работавшие с ним становятся гигантами мысли и часто отцами русской демократии. Это гигабайты свежей информации, это множество выученных матов и анальных проклятий, это живое общение с санитарами
2.Почему не ЯВА? Потому что
3.Го бухать? конечно

Время документации!
Официальная документация к Cuberite API: https://api.cuberite.org/index.html
Документация к LUA (англ., продвинутая): https://www.lua.org/manual/5.4/
Документация к LUA (рус., базовая): https://www.cronos.ru/index.html

Я сделаю свою документацию к луа вмсете с Cuberite API через какое-то время, а пока просто советы.




1. Оптимизация (да, с порога)
Не объявляйте глобальных переменных без надобности.

пример:
```lua
i=1  --переменная, которая объявлена вот так - глобальная т.е. доступная во всем коде и жрущая ресурсы сервера
function MyOnTick()

  for i=1,10 do

  end

end
```
лучше вот так:
```lua

function MyOnTick()
  local i=1 --вот так, переменная i объявляется локально. Она будет доступна только внутри функции MyOnTick и будет потреблять ресурсы только пока работает функция
  for i=1,10 do

  end

end
```

Избегайте как огня бесконечных циклов.

пример:
```lua
--код
while(true)do

end
--код
```
этот цикл не завершится НИКОГДА, он будет жрать прямо ЖРАТЬ много ресурсов сервера, и как бонус положит работу (в лучшем случае) плагина, а в худшем сервер

Не допускайте вызова функцией самой себя

пример:
```lua
function shit()

shit()

end
```
П*здец международного масштаба обеспечен
функция вызывается, затем она вызывает себя вторую, которая вызывает себя же, но уже третью и это все со скоростью 20 раз в секунду, а может и больше


**Изменение типа переменной на ходу**
пример:
```lua
a=true

if a=true then
a="cock"
end
```
LUA ЯП без строгой типизации т.е. переменные могут менять свой тип после объявления, но лучше это не делать.
а вдруг эта переменная с текстом пойдет дальше в функцию, которая ждет только число? ошибка стоп 0х000001 

**очень ОЧЕНЬ болшие значения**
пример:
```lua
a=2^64
a=a+1 

```
a будет равно 1, потому что в 64 битной винде могут быть только 64 битные числа т.е максимальное число это 2^64. При добавлении единицы, переменная переполняется, становится равна нулю, а затем единице. Лучше считать предел 32 бита т.е. 2^32
